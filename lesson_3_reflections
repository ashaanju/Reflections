1) When would you want to use a remote repository rather than keeping all your work local?
When more than one person is working on the file or project, it makes sense to have a remote repository
Also a remote repository can be used to show people some part of your results while working on other features

2)Why might you want to always pull changes manually rather than having 
Git automatically stay up-to-date with your remote repository?
You might not want all the changes made in the remote repository implemented in your local repository.
The changes might be made by someone else working on the remote repository and might not be in the same development phase as your local files.

3) Describe the differences between forks, clones, and branches. When would you use one instead of another?
Branches are used to create alternate development paths from an existing repository. Branches are made on a single repository
Clones can be used to copy one repositor from one location to another. The two locations can be local or one local and one remote.
Fork is used to clone repositor from github to github.

4) What is the benefit of having a copy of the last known state of the remote stored locally?
It is helpful when it comes to updating the remote copy with the latest local copy
It helps in fast merging

5) How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
I will use Git and GitHub to keep track of changes made to the files. 
GitHub will help me collaborate with others, by helping to make independant changes and track them.
Tracking changes and merging will be easier with GitHub
The learning curve for Git and GitHub is steep and so getting used to it will take time.

6) When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
It is better to make changes to a separate branch when we are making experiemental changes that may not work out.
It is also better to use separate branch if the changes made needs to be approved by someone else.
Working on separate branch helps to ensure master is working and only include working code/product in the master files.
However working on separate branches can result in merge conflict that needs to be resolved before merge can be complete.
